/*
 * EWP_Config.c
 *
 *  Created on: Apr 23, 2013
 *      Author: Daniel
 */
#include "Functions.h"
 // Example specific Include file
void ConfigEpwm1(void);
void ConfigEpwm2(void);
void ConfigEpwm3(void);
void Config_Current_ADC(void);

POSSPEED qep_posspeed=POSSPEED_DEFAULTS;


void PeripheralConfig(void)
{
	Config_Current_ADC();
	//qep_posspeed.init(&qep_posspeed);
	//Config_PS_ADC();
	return;
}

void EPwmConfig(void)
{
    // Time-base registers
    EPwm3Regs.TBPRD = 3000;                        		// Set timer period
    EPwm3Regs.TBPHS.half.TBPHS = 0x0000;          		// Phase is 0
    EPwm3Regs.TBCTR = 0x0000;                      		// Clear counter

    // Setup TBCLK
    EPwm3Regs.TBCTL.bit.CTRMODE = TB_COUNT_UPDOWN; // Count up
    EPwm3Regs.TBCTL.bit.PHSEN = TB_DISABLE;       // Disable phase loading
    EPwm3Regs.TBCTL.bit.HSPCLKDIV = TB_DIV1;      // Clock ratio to SYSCLKOUT
    EPwm3Regs.TBCTL.bit.CLKDIV = TB_DIV1;         //
    // Setup compare
    EPwm3Regs.CMPA.half.CMPA = 1000;

    // Set actions
    EPwm3Regs.AQCTLA.bit.CAU = AQ_SET;             // Set PWM3A on Zero
    EPwm3Regs.AQCTLA.bit.CAD = AQ_CLEAR;
//----------------------------------------------------------------------------------------------//
    // Time-base registers
    EPwm2Regs.TBPRD = Outer_Loop_Period;                        		// Set timer period
    EPwm2Regs.TBPHS.all = 0;          		// Phase is 0
    EPwm2Regs.TBCTR = 0x0000;                      		// Clear counter

    // Setup TBCLK
    EPwm2Regs.TBCTL.bit.CTRMODE = TB_COUNT_UPDOWN; // Count up
    EPwm2Regs.TBCTL.bit.PHSEN = TB_DISABLE;       // Disable phase loading
    EPwm2Regs.TBCTL.bit.HSPCLKDIV = TB_DIV1;      // Clock ratio to SYSCLKOUT
    EPwm2Regs.TBCTL.bit.CLKDIV = TB_DIV1;         //
    // Setup compare

    // Set actions
    EPwm2Regs.AQCTLA.bit.ZRO = AQ_SET;             // Set PWM3A on Zero
    EPwm2Regs.AQCTLA.bit.PRD = AQ_CLEAR;
//-----------------------------------------------------------------------------------------//
    // Time-base registers
    EPwm1Regs.TBPRD = Inner_Loop_Period;                        		// Set timer period
    EPwm1Regs.TBPHS.all = 0;          		// Phase is 0
    EPwm1Regs.TBCTR = 0;                      		// Clear counter
    //EPwm1Regs.TBCTL.bit.PRDLD = TB_IMMEDIATE;
    EPwm1Regs.TBCTL.bit.CTRMODE = TB_COUNT_UPDOWN; // Count up
    EPwm1Regs.TBCTL.bit.PHSEN = TB_DISABLE;       // Disable phase loading
    EPwm1Regs.TBCTL.bit.HSPCLKDIV = TB_DIV1;      // Clock ratio to SYSCLKOUT
    EPwm1Regs.TBCTL.bit.CLKDIV = TB_DIV1;         //
    // Setup compare

    // Set actions
    EPwm1Regs.AQCTLA.bit.ZRO = AQ_SET;             // Set PWM3A on Zero
    EPwm1Regs.AQCTLA.bit.PRD = AQ_CLEAR;

}

void Config_Current_ADC( void )
{
    // Configure ADC
    EALLOW;

    Adc1Regs.ADCCTL2.bit.ADCNONOVERLAP = 1;     // Set ADC to non-overlap mode

    Adc1Regs.ADCCTL1.bit.INTPULSEPOS   = 0;     // EOC trips after conversion result is latched
    Adc1Regs.INTSEL1N2.bit.INT1E       = 1;     // Enabled ADCINT1
    Adc1Regs.INTSEL1N2.bit.INT1CONT    = 0;     // Disable ADCINT1 Continuous mode
    Adc1Regs.INTSEL1N2.bit.INT1SEL     = 1;     // setup EOC1 to trigger ADCINT1

    // Select ADC input channels
    Adc1Regs.ADCSOC1CTL.bit.CHSEL      = 0;     // set SOC1 channel select to ADC1A2

    // Selecting triggers for SOCs
    AnalogSysctrlRegs.TRIG5SEL.all     = 5;     // Assigning EPWM1SOCA to TRIGGER 6 of analog subsystem

    Adc1Regs.ADCSOC1CTL.bit.TRIGSEL    = 9;    // Assign EPWM1SOCA to SOC1 TRIGSEL

    // Set S/H window of 7 ADC clock cycles
    Adc1Regs.ADCSOC1CTL.bit.ACQPS      = 6;

    EDIS;
    return;
}


